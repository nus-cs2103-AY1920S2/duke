package duke;

import duke.task.TaskList;
import duke.exception.DukeException;
import duke.command.Command;

/**
 * Represents the main logic flow of the Duke Application.
 * A <code>Storage</code> object stores all list data into disk.
 * A <code>TaskList</code> object stores list of user tasks in RAM.
 * A <code>Ui</code> object handles input and generates the response for user.
 */
public class Duke {

    private Storage storage;
    private TaskList tasks;
    private Ui ui;

    /**
     * Creates a Duke object.
     * @param filePath The location of the file that stores all user list history.
     */
    public Duke(String filePath) {
        this.ui = new Ui();
        this.storage = new Storage(filePath);
        try {
            this.tasks = new TaskList(storage.load());
        } catch (DukeException e) {
            this.ui.showLoadingError();
            this.tasks = new TaskList();
        }
    }

    /**
     * Runs instruction by user and returns the corresponding response generated by its ui.
     * @param instruction The String of user input.
     * @return A relevant response to the user input.
     */
    public String run(String instruction) {
        String result;
        try {
            Command c = Parser.parse(instruction);
            result = c.execute(tasks, ui);

            assert !result.equals("") : "No result was returned.";
        } catch (DukeException e) {
            result = ui.showError(e);
        }
        storage.save(tasks.getList());
        return result;
    }
}